name: Build/release

on:
  push:
  pull_request:

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read package version
        uses: ZvonimirSun/read-package-version-actions@v2
        id: package-version

      - name: Get Latest Release Version
        id: get-latest-release
        uses: ddbaptiste/get-latest-release@v1.0.0

      - name: Version check
        run: |
          echo "Current package.json version: ${{ steps.package-version.outputs.version }}"
          echo "Latest release version: ${{ steps.get-latest-release.outputs.latest-release }}"


      # - name: Compare versions and increment if needed
      #   id: compare-versions
      #   run: |
      #     PACKAGE_VERSION="${{ steps.package-version.outputs.version }}"
      #     GITHUB_RELEASE_VERSION="${{ steps.get-latest-release.outputs.latest-release }}"

      #     # Strip leading 'v' if present
      #     GITHUB_RELEASE_VERSION="${GITHUB_RELEASE_VERSION#v}"

      #     echo "Package version: $PACKAGE_VERSION"
      #     echo "GitHub release version: $GITHUB_RELEASE_VERSION"

      #     if [ "$PACKAGE_VERSION" = "$GITHUB_RELEASE_VERSION" ]; then
      #       NEW_VERSION=true
      #       echo "New version: $NEW_VERSION"
      #       echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
      #       exit 0
      #     fi

      # - name: Stop rest of actions since package.json version is the same
      #   if: steps.compare-versions.outputs.NEW_VERSION
      #   run: exit 1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'

      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - run: pip install setuptools
      - run: yarn install && yarn global add @quasar/cli

      - name: Build and Publish Electron App
        run: yarn quasar build -m electron
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
