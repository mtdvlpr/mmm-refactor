<template>
  <q-select emit-value map-options filled v-model="localValue" :use-input="useInput" input-debounce="0" clearable
     :options="options" dense :label="label">
    <!-- @filter="filterFn" :options="options" dense :label="label"> -->
  </q-select>
</template>

<script lang="ts">
import { defineComponent, ref, watch } from 'vue';
// import { getListOptions, filterFn } from 'src/helpers/settings';

// import { useJwStore } from 'src/stores/jw';
// import { storeToRefs } from 'pinia';
// const jwStore = useJwStore();
// const { jwLanguages } = storeToRefs(jwStore);
// const filteredJwLanguages = ref(jwLanguages.value.list);

// import { useObsStateStore } from 'stores/obs-state';
// const obsState = useObsStateStore();
// const { nonMediaScenes, nonStageScenes, scenes } = storeToRefs(obsState)


export default defineComponent({
  name: 'SelectInput',
  props: {
    modelValue: {
      type: String,
      default: '',
    },
    options: {
      type: Array,
      default: () => [],
    },
    useInput: {
      type: Boolean,
      default: false,
    },
    label: {
      type: String,
      default: null,
    },
  },
  emits: ['update:modelValue'],
  setup(props, { emit }) {
    const localValue = ref(props.modelValue);

    watch(localValue, (newValue) => {
      emit('update:modelValue', newValue);
    });

    watch(
      () => props.modelValue,
      (newValue) => {
        localValue.value = newValue;
      }
    );

    return {
      localValue,
      // getListOptions,
      // filterFn,
    };
  },
});
</script>
